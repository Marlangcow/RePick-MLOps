name: RePick Pipeline

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      update_type:
        description: '업데이트 유형 선택'
        required: true
        type: choice
        options: [all, pdf-only, docker-only]

jobs:
  process-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-3
          role-duration-seconds: 3600
          mask-aws-account-id: true     

      # 3. Python 의존성 설치
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. 환경변수 설정
      - name: Set up environment variables
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> $GITHUB_ENV
          echo "UPSTAGE_API_KEY=${{ secrets.UPSTAGE_API_KEY }}" >> $GITHUB_ENV
          echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> $GITHUB_ENV

      # 5. PDF 데이터 디렉토리 생성
      - name: Create data directories
        run: |
          mkdir -p data/pdf
          mkdir -p data/vectordb
          mkdir -p data/logs

      # 6. MongoDB에서 PDF 다운로드
      - name: Download PDFs from MongoDB
        if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'pdf-only' }}
        run: python src/utils/mongodb_utils.py

      # 7. PDF 처리 파이프라인 실행
      - name: Run PDF processing pipeline
        if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'pdf-only' }}
        run: bash scripts/run_pipeline.sh

      # 8. ChromaDB 데이터를 S3에 업로드
      - name: Configure AWS credentials for S3
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-3

      - name: Upload ChromaDB to S3
        if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'pdf-only' }}
        run: |
          tar -czf vectordb.tar.gz -C data/vectordb .
          aws s3 cp vectordb.tar.gz s3://${{ secrets.AWS_S3_BUCKET }}/vectordb/vectordb.tar.gz

      # 9. Docker Buildx 설정
      - name: Set up Docker Buildx
        if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'docker-only' }}
        uses: docker/setup-buildx-action@v2

      # 10. Git 태그에서 버전 추출
      - name: Extract version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=latest" >> $GITHUB_ENV
          fi
        
      - name: Login to DockerHub
        if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'docker-only' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'docker-only' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/repick-api:${{ env.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/repick-api:latest
            
      - name: Deploy to Amazon ECS
        if: ${{ github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'docker-only' }}
        run: |
          aws ecs update-service \
            --cluster repick-cluster \
            --service repick-service \
            --force-new-deployment
